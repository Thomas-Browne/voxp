?assign.Majority()
devtools::load_all(".")
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
# Install packages
library(tidyverse)
library(data.table)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
column)]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(assign.Majority)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
column)]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
result$shape <- assign.Majority(data = data,
identifier = data$id,
column = data$shape,
proportion_threshold = 0.5)$variable
View(data)
result$size <- assign.Majority(data = data,
identifier = data$id,
column = data$size,
proportion_threshold = 0.5)$variable
library(voxp)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
?assign.Majority
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
force(assign.Majority)
View(assign.Majority)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
install.packages("data.table")
library(voxp)
force(assign.Majority)
View(assign.Majority)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
library(voxp)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N),
column),
by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# # Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N),
#                                             column),
#                                         by = identifier]
#
# # Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
# Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
#                                                                    column[which.max(prop)],
#                                                                    paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
#                                        by = identifier]
# Return assigned country
return(variable_counts)
}
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N),
column),
by = identifier]
#
# # Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
# Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
#                                                                    column[which.max(prop)],
#                                                                    paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
#                                        by = identifier]
# Return assigned country
return(variable_proportions)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
#
# # Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
# Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
#                                                                    column[which.max(prop)],
#                                                                    paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
#                                        by = identifier]
# Return assigned country
return(variable_proportions)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
#
# # Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
# Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
#                                                                    column[which.max(prop)],
#                                                                    paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
#                                        by = identifier]
# Return assigned country
return(variable_proportions)
}
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
#
# # Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
# Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
#                                                                    column[which.max(prop)],
#                                                                    paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
#                                        by = identifier]
# Return assigned country
return(variable_proportions)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
result$shape <- assign.Majority(data = data,
identifier = data$id,
column = data$shape,
proportion_threshold = 0.5)$variable
result$size <- assign.Majority(data = data,
identifier = data$id,
column = data$size,
proportion_threshold = 0.5)$variable
View(result)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "red", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "red", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(voxp)
?assign.Majority
library(voxp)
?assign.Majority
devtools::install_github("https://github.com/Thomas-Browne/voxp")
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, threshold = 0.5)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
View(assign.Majority)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
# variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
# variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(dplyr)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(data.table)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(devtools)
install_github("https://github.com/Thomas-Browne/APEDDR.tools")
install_github("https://github.com/Thomas-Browne/APEDDR.tools")
