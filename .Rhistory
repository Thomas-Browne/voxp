# Return assigned country
return(variable_proportions)
}
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
result$shape <- assign.Majority(data = data,
identifier = data$id,
column = data$shape,
proportion_threshold = 0.5)$variable
result$size <- assign.Majority(data = data,
identifier = data$id,
column = data$size,
proportion_threshold = 0.5)$variable
View(result)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "red", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "red", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.5)
View(result)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(voxp)
?assign.Majority
library(voxp)
?assign.Majority
devtools::install_github("https://github.com/Thomas-Browne/voxp")
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, threshold = 0.5)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
View(assign.Majority)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
# variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
# variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
assign.Majority <- function(data, identifier, column, proportion_threshold = 0.8) {
library(data.table)
setDT(data)
# Count the sum of all entries in variable column by unique identifier in a new variable: "N"
variable_counts <- data[, .N, by = .(identifier,
as.character(column))]
# Define a new variable: "prop", that calculated the proportion of variable entry data
# variable_proportions <- variable_counts[, .(prop = N/sum(N), column = column), by = identifier]
variable_proportions <- variable_counts[, .(prop = sum(N), column = column[which.max(N)]), by = identifier]
variable_proportions[, prop := prop/sum(prop), by = identifier]
# Test if the maximum proportion surpasses the proportional threshold. If true, returns the variable, else returns "Did not meet threshold".
Assigned_value <- variable_proportions[, .(Assigned_value = ifelse(max(prop) > proportion_threshold,
column[which.max(prop)],
paste0("Did not meet threshold (", round(max(prop)*100, 2),"%)"))),
by = identifier]
# Return assigned country
return(Assigned_value)
}
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(dplyr)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "blue", "blue", "green", "green", "green")
)
voxp::assign.Majority(data, data$id, data$colour, proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(data.table)
result <- assign.Majority(data = data,
identifier = data$id,
column = data$colour,
proportion_threshold  = 0.7)
library(devtools)
install_github("https://github.com/Thomas-Browne/APEDDR.tools")
install_github("https://github.com/Thomas-Browne/APEDDR.tools")
library(voxp)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
column = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
library(dplyr)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
library(voxp)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
column = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
column = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
library(voxp)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
View(result)
result$shape <- assign.Majority(data = data,
identifier = data$id,
column = data$shape,
proportion_threshold = 0.5)$variable
result$shape <- assign.Majority(data = data,
identifier = 'id',
column = 'shape',
proportion_threshold = 0.5)$variable
result$shape <- assign.Majority(data = data,
identifier = 'identifier',
column = 'column',
proportion_threshold = 0.5)$variable
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
result$shape <- assign.Majority(data = data,
identifier = 'identifier',
column = 'shape',
proportion_threshold = 0.5)$variable
result$shape <- assign.Majority(data = data,
identifier = 'identifier',
column = 'shape',
proportion_threshold = 0.5)
View(result)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'shape',
proportion_threshold = 0.5)
View(result)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'size',
proportion_threshold = 0.5)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'shape',
proportion_threshold = 0.5)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'size',
proportion_threshold = 0.5)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c('10', '20', '30', '40', '50', '60')
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'size',
proportion_threshold = 0.5)
View(result)
library(voxp)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'size',
proportion_threshold = 0.5)
rlang::last_trace()
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
View(result)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'shape',
proportion_threshold = 0.5)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'size',
proportion_threshold = 0.5)
library(voxp)
library(voxp)
library(voxp)
data <- data.frame(
identifier = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'identifier',
column = 'colour',
proportion_threshold  = 0.7)
View(result)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'colour',
proportion_threshold  = 0.7)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'colour',
proportion_threshold  = 0.7)
View(result)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "square", "triangle", "circle", "square", "triangle"),
size = as.character(c(10, 20, 30, 40, 50, 60))
)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'colour',
proportion_threshold  = 0.7)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'shape',
proportion_threshold = 0.5)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'size',
proportion_threshold = 0.5)
library(voxp)
data <- data.frame(
id = c(1, 1, 1, 2, 2, 3),
colour = c("red", "red", "blue", "green", "yellow", "green"),
shape = c("circle", "triangle", "triangle", "circle", "square", "triangle"),
size = c(10, 20, 30, 40, 50, 60)
)
result <- assign.Majority(data = data,
identifier = 'id',
column = 'colour',
proportion_threshold  = 0.7)
?assign.Majority
library(voxp)
?assign.Majority
library(voxp)
?assign.Majority
source("~/.active-rstudio-document", echo=TRUE)
?sample
Employee_data <- data.frame(Employee_ID = sample(x = 10000:9999, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE))
View(Employee_data)
Employee_data <- data.frame(Employee_ID = sample(x = 10000:99999, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE))
View(Employee_data)
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = words, size = 1000, replace = TRUE))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE))
Countries <- c('Australia', 'Fiji', 'New Zealand', 'England')
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE))
View(Patient_data)
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = as.Date(sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE)),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = as.Date(sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE)))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE)))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE))
View(Patient_data)
Patient_data$Date_of_birth <- as.Date(Patient_data$Date_of_birth, origin = “1970-01-01”)
Patient_data$Date_of_birth <- as.Date(Patient_data$Date_of_birth, origin = '1970-01-01')
View(Patient_data)
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:))
Countries <- c('Australia', 'Fiji', 'New Zealand', 'England')
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE))
View(Employee_data)
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup()
View(Employee_data)
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup() %>%
mutate(Start_time = paste0( Start_time, ifelse(Start_time >= 12, 'PM', 'AM')))
View(Employee_data)
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup() %>%
mutate(Start_time = paste( Start_time, ifelse(Start_time >= 12, 'PM', 'AM')))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup() %>%
mutate(Start_time = paste( Start_time, ifelse(Start_time >= 12, 'PM', 'AM')),
Finish_time = paste( Finish_time, ifelse(Finish_time >= 12, 'PM', 'AM')))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup() %>%
mutate(Start_time = paste( Start_time, ifelse(Start_time >= 12, 'PM', 'AM')),
Finish_time = paste( Finish_time, ifelse(Finish_time >= 12, 'PM', 'AM')))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE),
Needs_interpreter = sample x = 0:1, size = 1000, replace = TRUE))
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE),
Needs_interpreter = sample x = 0:1, size = 1000, replace = TRUE)
Needs_interpreter = sample( x = 0:1, size = 1000, replace = TRUE)
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE),
Needs_interpreter = sample( x = 0:1, size = 1000, replace = TRUE))
Employee_data <- data.frame(Employee_ID = sample(x = 100:120, size = 50, replace = TRUE),
Start_time = sample(x = 6:14, size = 50, replace = TRUE),
Finish_time = sample(x = 14:22, size = 50, replace = TRUE)) %>%
group_by(Employee_ID) %>%
mutate(Hours_worked = Finish_time - Start_time) %>%
ungroup() %>%
mutate(Start_time = paste( Start_time, ifelse(Start_time >= 12, 'PM', 'AM')),
Finish_time = paste( Finish_time, ifelse(Finish_time >= 12, 'PM', 'AM')))
Countries <- c('Australia', 'Fiji', 'New Zealand', 'England')
Patient_data <- data.frame(Patient_number = sample(x = 1001:1500, size = 1000, replace = TRUE),
Date_of_birth = sample(x = as.Date('2020-01-01'):as.Date('2020-01-05'), size = 1000, replace = TRUE),
Country_of_birth = sample(x = Countries, size = 1000, replace = TRUE),
Needs_interpreter = sample( x = 0:1, size = 1000, replace = TRUE))
View(Employee_data)
saveRDS(Employee_data, "Employee_data.rds")
saveRDS(Patient_data, "Patient_data.rds")
